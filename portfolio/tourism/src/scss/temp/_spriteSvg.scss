$sprites: (
    'arrow-left': "data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 14 12'%3e%3cpath data-name='Shape 1' d='M.223 5.439L5.279.23a.752.752 0 011.084 0l.459.473a.8.8 0 01.224.558.812.812 0 01-.224.565l-2.95 3.045h9.371a.759.759 0 01.756.776v.669a.79.79 0 01-.756.811h-9.4l2.983 3.063a.8.8 0 010 1.109l-.459.471a.753.753 0 01-1.084 0L.227 6.561a.814.814 0 010-1.121z' fill='%232f2f2f'/%3e%3c/svg%3e",
    'arrow-right': "data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 14 12'%3e%3cpath data-name='Shape 1' d='M13.776 5.439L8.72.23a.752.752 0 00-1.084 0l-.459.473a.8.8 0 00-.224.558.812.812 0 00.224.565l2.95 3.045H.756A.759.759 0 000 5.647v.669a.79.79 0 00.756.811h9.4L7.173 10.19a.8.8 0 000 1.109l.459.471a.753.753 0 001.084 0l5.056-5.209a.814.814 0 000-1.121z' fill='%232f2f2f'/%3e%3c/svg%3e",
    'mouse': "data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 21 32'%3e%3cpath data-name='mouse down' d='M0 21.436V10.563a10.5 10.5 0 1121 0v10.905a10.5 10.5 0 11-21-.032zm1.976-10.873v10.873a8.525 8.525 0 1017.05.032V10.563a8.525 8.525 0 10-17.05 0zm8.515 2.907a.981.981 0 01-.98-.98V9.07a.98.98 0 01.98-.98h.01a.98.98 0 01.98.98v3.42a.981.981 0 01-.98.98z' fill='white'/%3e%3c/svg%3e"
);

$fragment-sizes: (
    'arrow-left': (
        'width': 14px,
        'height': 12px
    ),
    'arrow-right': (
        'width': 14px,
        'height': 12px
    ),
    'mouse': (
        'width': 21px,
        'height': 32px
    )
);

$variables: (
    /* EMPTY */
);

// https://github.com/waldemarfm/sass-svg-uri/blob/v1.0.0/_svg-uri.scss
@function sprite-str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if type-of($replace) == 'null' {
        $replace: '';
    }

    @if ( $index ) {
        @return str-slice($string, 1, $index - 1) + $replace + sprite-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

@function sprite-svg-uri($value) {
    $encoded: '';
    $slice: 2000;
    $index: 0;

    @for $i from 1 through ceil(str-length($value) / $slice) {
        $chunk: str-slice($value, $index, $index + $slice - 1);
        $chunk: sprite-str-replace($chunk, '"', "'");
        $chunk: sprite-str-replace($chunk, '<', '%3C');
        $chunk: sprite-str-replace($chunk, '>', '%3E');
        $chunk: sprite-str-replace($chunk, '&', '%26');
        $chunk: sprite-str-replace($chunk, '#', '%23');
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }

    @return $encoded;
}

@mixin sprite($name, $user-variables: (), $include-size: false) {
    $sprite: map-get($sprites, $name);

    // Inject variables
    $default-variables: map-get($variables, $name);
    @if type-of($default-variables) == 'map' {
        @each $key, $value in map-merge($default-variables, $user-variables) {
            @if ( not map-has-key($default-variables, $key) ) {
                @warn 'Sprite \'#{$name}\' does not support variable named \'#{$key}\'';
            }

            $sprite: sprite-str-replace($sprite, '___#{$key}___', sprite-svg-uri(quote(#{$value})));
        }
    } @else if type-of($user-variables) == 'map' {
        @warn 'Sprite \'#{$name}\' does not contain any variables';
    }

    background: url($sprite) center no-repeat;

    @if $include-size {
        $size: map-get($fragment-sizes, $name);
        background-size: map-get($size, width) map-get($size, height);
    }
}
